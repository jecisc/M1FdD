THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphSystemSettings class>>restoreSynectiqueBackground:
1 March 2016 11:05:33.621987 pm

VM: Mac OS - intel - 1092 - NBCoInterpreter NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
NBCogit NativeBoost-CogPlugin-HolgerHansPeterFreyther.21 uuid: e0df6e2d-5694-40e2-8035-dc217200b424 Sep 25 2014
https://github.com/pharo-project/pharo-vm.git Commit: 81b5d19917dcb78f22482a780deec48c53738396 Date: 2014-09-20 14:36:18 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14858

Image: Pharo4.0 [Latest update: #40626]

PolymorphSystemSettings class(Object)>>doesNotUnderstand: #restoreSynectiqueBackground:
	Receiver: PolymorphSystemSettings
	Arguments and temporary variables: 
		aMessage: 	restoreSynectiqueBackground: PolymorphSystemSettings
		exception: 	MessageNotUnderstood: PolymorphSystemSettings class>>restoreSynectiq...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PolymorphSystemSettings
		classPool: 	a Dictionary(#DesktopColor->(Color r: 0.295 g: 0.295 b: 0.295 alpha:...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Settings-Polymorph'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ (Smalltalk at: #PolymorphSystemSettings) perform: #restoreSynectiq...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


OpalCompiler(AbstractCompiler)>>evaluate:
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		textOrString: 	'(Smalltalk at: #PolymorphSystemSettings) perform: #restoreSynect...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ (Smalltalk at: #PolymorphSystemSettings) perform: #restoreSynectiq...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


[ self class compiler evaluate: self code ] in StartupAction>>execute
	Receiver: a StartupAction(restoreSynectiqueBackground)
	Arguments and temporary variables: 
		block: 	[ self class compiler evaluate: self code ]
		correctlyExecuted: 	true
	Receiver's instance variables: 
		code: 	'(Smalltalk at: #PolymorphSystemSettings) perform: #restoreSynectiqueBack...etc...
		hasBeenExecuted: 	false
		runOnce: 	true
		nameOfItem: 	nil
		name: 	#restoreSynectiqueBackground


BlockClosure>>on:do:
	Receiver: [ self class compiler evaluate: self code ]
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
StartupPreferencesLoader default errors
	add:
		{ex.
		...etc...
	Receiver's instance variables: 
		outerContext: 	StartupAction>>execute
		startpc: 	114
		numArgs: 	0


StartupAction>>execute
	Receiver: a StartupAction(restoreSynectiqueBackground)
	Arguments and temporary variables: 
		block: 	[ self class compiler evaluate: self code ]
		correctlyExecuted: 	true
	Receiver's instance variables: 
		code: 	'(Smalltalk at: #PolymorphSystemSettings) perform: #restoreSynectiqueBack...etc...
		hasBeenExecuted: 	false
		runOnce: 	true
		nameOfItem: 	nil
		name: 	#restoreSynectiqueBackground


[ :item :index | 
bar current: index.
(self add: item) execute ] in [ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: index.
		(self add: item) execute ] ] in StartupPreferencesLoader>>executeAtomicItems:
	Receiver: a StartupPreferencesLoader
	Arguments and temporary variables: 
		aCollection: 	an Array(a StartupAction(Syntax) a StartupAction(Variable) a Start...etc...
		bar: 	a Job
		item: 	a StartupAction(restoreSynectiqueBackground)
		index: 	9
	Receiver's instance variables: 
		errors: 	an OrderedCollection(an Array(MessageNotUnderstood: PolymorphSystemSett...etc...
		actions: 	a Dictionary('AST based coloring'->a StartupAction(AST based coloring)...etc...


Array(SequenceableCollection)>>withIndexDo:
	Receiver: an Array(a StartupAction(Syntax) a StartupAction(Variable) a StartupAction(AST based color...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :item :index | 
bar current: index.
(self add: item) ex...etc...
		index: 	9
	Receiver's instance variables: 
an Array(a StartupAction(Syntax) a StartupAction(Variable) a StartupAction(AST based color...etc...

Array(SequenceableCollection)>>doWithIndex:
	Receiver: an Array(a StartupAction(Syntax) a StartupAction(Variable) a StartupAction(AST based color...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :item :index | 
bar current: index.
(self add: item) ex...etc...
	Receiver's instance variables: 
an Array(a StartupAction(Syntax) a StartupAction(Variable) a StartupAction(AST based color...etc...

[ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: index.
		(self add: item) execute ] ] in StartupPreferencesLoader>>executeAtomicItems:
	Receiver: a StartupPreferencesLoader
	Arguments and temporary variables: 
		aCollection: 	an Array(a StartupAction(Syntax) a StartupAction(Variable) a Start...etc...
		bar: 	a Job
	Receiver's instance variables: 
		errors: 	an OrderedCollection(an Array(MessageNotUnderstood: PolymorphSystemSett...etc...
		actions: 	a Dictionary('AST based coloring'->a StartupAction(AST based coloring)...etc...


BlockClosure>>cull:
	Receiver: [ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: index.
		(self add: i...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	StartupPreferencesLoader>>executeAtomicItems:
		startpc: 	46
		numArgs: 	1


[ result := block cull: self ] in [ 
self prepareForRunning.
[ result := block cull: self ]
	on: JobNotification
	do: [ :notification | notification handle: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		block: 	[ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: ind...etc...
		currentValue: 	9
		min: 	0
		max: 	30
		title: 	'Load Startup Preferences'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>on:do:
	Receiver: [ result := block cull: self ]
	Arguments and temporary variables: 
		exception: 	JobNotification
		handlerAction: 	[ :notification | notification handle: self ]
	Receiver's instance variables: 
		outerContext: 	[ 
self prepareForRunning.
[ result := block cull: self ]
	on: Jo...etc...
		startpc: 	57
		numArgs: 	0


[ 
self prepareForRunning.
[ result := block cull: self ]
	on: JobNotification
	do: [ :notification | notification handle: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		block: 	[ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: ind...etc...
		currentValue: 	9
		min: 	0
		max: 	30
		title: 	'Load Startup Preferences'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ 
self prepareForRunning.
[ result := block cull: self ]
	on: JobNotification
	do: [ :not...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	49
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		block: 	[ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: ind...etc...
		currentValue: 	9
		min: 	0
		max: 	30
		title: 	'Load Startup Preferences'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


MorphicUIManager(UIManager)>>displayProgress:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Load Startup Preferences'
		minVal: 	0
		maxVal: 	30
		workBlock: 	[ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current:...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


ByteString(String)>>displayProgressFrom:to:during:
	Receiver: 'Load Startup Preferences'
	Arguments and temporary variables: 
		minVal: 	0
		maxVal: 	30
		workBlock: 	[ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current:...etc...
	Receiver's instance variables: 
'Load Startup Preferences'

StartupPreferencesLoader>>executeAtomicItems:
	Receiver: a StartupPreferencesLoader
	Arguments and temporary variables: 
		aCollection: 	an Array(a StartupAction(Syntax) a StartupAction(Variable) a Start...etc...
	Receiver's instance variables: 
		errors: 	an OrderedCollection(an Array(MessageNotUnderstood: PolymorphSystemSett...etc...
		actions: 	a Dictionary('AST based coloring'->a StartupAction(AST based coloring)...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ StartupLoader default
		executeAtomicItems:
			{(StartupAction
			...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


DoItDeclaration>>importFor:
	Receiver: a DoItDeclaration(StartupLoader default executeAtomicItems: {

	StartupAction name: 'Synta...etc...
	Arguments and temporary variables: 
		requestor: 	a FileCompilerRequestor
	Receiver's instance variables: 
		contents: 	'StartupLoader default executeAtomicItems: {

	StartupAction name: ''...etc...


[ :declaration | 
requestor ifNotNil: [ requestor contents: declaration contents ].
value := declaration importFor: requestor ] in CodeImporter>>evaluateDeclarations
	Receiver: a CodeImporter
	Arguments and temporary variables: 
		value: 	nil
		declaration: 	a DoItDeclaration(StartupLoader default executeAtomicItems: {

	St...etc...
	Receiver's instance variables: 
		readStream: 	MultiByteFileStream: '/Users/Cyril/Library/Preferences/pharo/4.0/ex...etc...
		codeDeclarations: 	an OrderedCollection(a DoItDeclaration(StartupLoader default ...etc...
		parserClass: 	ChunkFileFormatParser
		requestor: 	a FileCompilerRequestor


OrderedCollection>>do:
	Receiver: an OrderedCollection(a DoItDeclaration(StartupLoader default executeAtomicItems: {

	Start...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :declaration | 
requestor ifNotNil: [ requestor contents: declaration...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a DoItDeclaration(StartupLoader default executeAtomicItems: {

...etc...
		firstIndex: 	1
		lastIndex: 	1


CodeImporter>>evaluateDeclarations
	Receiver: a CodeImporter
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		readStream: 	MultiByteFileStream: '/Users/Cyril/Library/Preferences/pharo/4.0/ex...etc...
		codeDeclarations: 	an OrderedCollection(a DoItDeclaration(StartupLoader default ...etc...
		parserClass: 	ChunkFileFormatParser
		requestor: 	a FileCompilerRequestor


CodeImporter class>>evaluateFileStream:
	Receiver: CodeImporter
	Arguments and temporary variables: 
		aFileStream: 	MultiByteFileStream: '/Users/Cyril/Library/Preferences/pharo/4.0/e...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#codeDeclarations->CodeImporter>>#codeDeclaratio...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#(#readStream #codeDeclarations #parserClass #requestor)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CodeImporter
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#CodeImport
		traitComposition: 	{}
		localSelectors: 	nil


[ :stream | CodeImporter evaluateFileStream: stream ] in FileReference(AbstractFileReference)>>fileIn
	Receiver: File @ /Users/Cyril/Library/Preferences/pharo/4.0/exported_settings5.st
	Arguments and temporary variables: 
		stream: 	MultiByteFileStream: '/Users/Cyril/Library/Preferences/pharo/4.0/export...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'Cyril' / 'Library' / 'Preferences' / 'pharo' / '4.0' / ...etc...


[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ /Users/Cyril/Library/Preferences/pharo/4.0/exported_settings5.st
	Arguments and temporary variables: 
		aBlock: 	[ :stream | CodeImporter evaluateFileStream: stream ]
		stream: 	MultiByteFileStream: '/Users/Cyril/Library/Preferences/pharo/4.0/export...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'Cyril' / 'Library' / 'Preferences' / 'pharo' / '4.0' / ...etc...


BlockClosure>>ensure:
	Receiver: [ aBlock value: stream ]
	Arguments and temporary variables: 
		aBlock: 	[ stream close ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	FileReference(AbstractFileReference)>>readStreamDo:
		startpc: 	34
		numArgs: 	0


FileReference(AbstractFileReference)>>readStreamDo:
	Receiver: File @ /Users/Cyril/Library/Preferences/pharo/4.0/exported_settings5.st
	Arguments and temporary variables: 
		aBlock: 	[ :stream | CodeImporter evaluateFileStream: stream ]
		stream: 	MultiByteFileStream: '/Users/Cyril/Library/Preferences/pharo/4.0/export...etc...
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'Cyril' / 'Library' / 'Preferences' / 'pharo' / '4.0' / ...etc...


FileReference(AbstractFileReference)>>fileIn
	Receiver: File @ /Users/Cyril/Library/Preferences/pharo/4.0/exported_settings5.st
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'Users' / 'Cyril' / 'Library' / 'Preferences' / 'pharo' / '4.0' / ...etc...


[ :file | file fileIn ] in StartupPreferencesLoader>>load:
	Receiver: a StartupPreferencesLoader
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(File @ /Users/Cyril/Library/Preferences/pharo...etc...
		file: 	File @ /Users/Cyril/Library/Preferences/pharo/4.0/exported_settings5.st
	Receiver's instance variables: 
		errors: 	an OrderedCollection(an Array(MessageNotUnderstood: PolymorphSystemSett...etc...
		actions: 	a Dictionary('AST based coloring'->a StartupAction(AST based coloring)...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(File @ /Users/Cyril/Library/Preferences/pharo/4.0/exported_settings2....etc...
	Arguments and temporary variables: 
		aBlock: 	[ :file | file fileIn ]
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(File @ /Users/Cyril/Library/Preferences/pharo/4.0/exported_sett...etc...
		firstIndex: 	1
		lastIndex: 	5


StartupPreferencesLoader>>load:
	Receiver: a StartupPreferencesLoader
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(File @ /Users/Cyril/Library/Preferences/pharo...etc...
	Receiver's instance variables: 
		errors: 	an OrderedCollection(an Array(MessageNotUnderstood: PolymorphSystemSett...etc...
		actions: 	a Dictionary('AST based coloring'->a StartupAction(AST based coloring)...etc...


StartupPreferencesLoader>>loadFromDefaultLocations
	Receiver: a StartupPreferencesLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		errors: 	an OrderedCollection(an Array(MessageNotUnderstood: PolymorphSystemSett...etc...
		actions: 	a Dictionary('AST based coloring'->a StartupAction(AST based coloring)...etc...


PharoCommandLineHandler>>runPreferences
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a Session
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	BasicCommandLineHandler
		methodDict: 	a MethodDictionary(#activate->PharoCommandLineHandler>>#activate #c...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-CommandLineHandler'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
PolymorphSystemSettings class(Object)>>doesNotUnderstand: #restoreSynectiqueBackground:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
OpalCompiler(AbstractCompiler)>>evaluate:
[ self class compiler evaluate: self code ] in StartupAction>>execute
BlockClosure>>on:do:
StartupAction>>execute
[ :item :index | 
bar current: index.
(self add: item) execute ] in [ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: index.
		(self add: item) execute ] ] in StartupPreferencesLoader>>executeAtomicItems:
Array(SequenceableCollection)>>withIndexDo:
Array(SequenceableCollection)>>doWithIndex:
[ :bar | 
aCollection
	doWithIndex: [ :item :index | 
		bar current: index.
		(self add: item) execute ] ] in StartupPreferencesLoader>>executeAtomicItems:
BlockClosure>>cull:
[ result := block cull: self ] in [ 
self prepareForRunning.
[ result := block cull: self ]
	on: JobNotification
	do: [ :notification | notification handle: self ] ] in Job>>run
BlockClosure>>on:do:
[ 
self prepareForRunning.
[ result := block cull: self ]
	on: JobNotification
	do: [ :notification | notification handle: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
MorphicUIManager(UIManager)>>displayProgress:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
StartupPreferencesLoader>>executeAtomicItems:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
DoItDeclaration>>importFor:
[ :declaration | 
requestor ifNotNil: [ requestor contents: declaration contents ].
value := declaration importFor: requestor ] in CodeImporter>>evaluateDeclarations
OrderedCollection>>do:
CodeImporter>>evaluateDeclarations
CodeImporter class>>evaluateFileStream:
[ :stream | CodeImporter evaluateFileStream: stream ] in FileReference(AbstractFileReference)>>fileIn
[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
BlockClosure>>ensure:
FileReference(AbstractFileReference)>>readStreamDo:
FileReference(AbstractFileReference)>>fileIn
[ :file | file fileIn ] in StartupPreferencesLoader>>load:
OrderedCollection>>do:
StartupPreferencesLoader>>load:
StartupPreferencesLoader>>loadFromDefaultLocations
PharoCommandLineHandler>>runPreferences
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

